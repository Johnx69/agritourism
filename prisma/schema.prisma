generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // <- add this
}

enum Role {
  VISITOR
  OWNER
  EDITOR
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  role          Role      @default(VISITOR)
  image         String?
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  activityLogs ActivityLog[]
  Listing      Listing[]

  @@index([role])
  @@index([deletedAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * Our own tokens to keep flows explicit
 */
model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model InviteToken {
  id        String    @id @default(cuid())
  email     String
  role      Role      @default(VISITOR)
  token     String    @unique
  expires   DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
}

enum ListingStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
}

model Listing {
  id         String        @id @default(cuid())
  name       String
  slug       String        @unique
  shortIntro String?
  logoUrl    String?
  photos     Json?
  address1   String?
  city       String?
  region     String?
  postalCode String?
  country    String?
  phone      String?
  website    String?
  social     Json?
  hours      Json?
  amenities  Json?
  activities Json?
  status     ListingStatus @default(DRAFT)
  ownerId    String?
  owner      User?         @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?

  @@index([status, deletedAt])
  @@index([ownerId])
}
